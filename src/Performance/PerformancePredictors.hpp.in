/*
Copyright 2021 AI-SPRINT

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/

/**
* \file PerformancePredictors.hpp.in
*
* \brief Defines the classes that provide the interface between the Performance
*        Models (C++) and the (Python) functions.
*
* C++/Python interface is provided by a Web Server implemented with the Gunicorn WSGI.
* The communication between the library and the server is provided by the CPR library.
*
* \author Randeep Singh
*/

#ifndef PERFORMANCEPREDICTORS_HPP_
#define PERFORMANCEPREDICTORS_HPP_

#cmakedefine HOST "@HOST@" // not needed: maybe pass the entrypoints and the links

#include "src/TypeTraits.hpp"

namespace Space4AI
{

class Pacsltk final
{
  public:

    /** Default constructor */
    Pacsltk() = default;

    /** Instance getter */
    static
    Pacsltk&
    Instance()
    {
      // We use the Meyer's trick to instantiate the factory as Singleton
      static Pacsltk single_pacsltk;
      return single_pacsltk;
    }

    /** Method to compute the demand time.
    *
    *   \param part_lambda partition input workload
    *   \param demand_warm Demand time when there is an active server available on the platform
    *   \param demandCold_ Demand time when all the servers on the platform are down and a new one
    *                      needs to be activated
    *   \param idle_time_before_kill How long does the platform keep the servers up after being idle
    */
    TimeType predict(
      LoadType part_lambda,
      TimeType demandWarm, TimeType demandCold, TimeType idle_time_before_kill
    );

    Pacsltk(const Pacsltk&) = delete;
    Pacsltk& operator=(const Pacsltk&) = delete;

};

} //namespace Space4AI

#endif /* PERFORMANCEPREDICTORS_HPP_ */
