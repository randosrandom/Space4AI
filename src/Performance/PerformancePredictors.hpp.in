/**
* \file PerformancePredictors.hpp.in
*
* \brief Defines the classes that provide the interface between the Performance
*        Models (C++) and the (Python) functions of the a-ML library.
*
* C++/Python interface is provided by pybind11. For efficiency classes are implemented
* through the Meyer's singleton pattern.
*
* \author Randeep Singh
* \author Giulia Mazzilli
*/

#ifndef PERFORMANCEPREDICTORS_HPP_
#define PERFORMANCEPREDICTORS_HPP_

#cmakedefine PYTHONDIR "@PYTHONDIR@"

#include <pybind11/embed.h>

#include "src/TypeTraits.hpp"

namespace Space4AI
{
namespace py = pybind11;

class __attribute__((__visibility__("hidden"))) Pacsltk final
{
  	public:

    		static
    		Pacsltk&
    		Instance()
    		{
    			// We use the Meyer's trick to istantiate the factory as Singleton
    			static Pacsltk single_pacsltk;
    			return single_pacsltk;
    		}

    		TimeType
    		predict(
    		    LoadType part_lambda,
    		    TimeType demandWarm, TimeType demandCold, TimeType idle_time_before_kill
    		) const
    		{
    			return pacsltk_predictor(
    			        part_lambda, demandWarm, demandCold, idle_time_before_kill
    			    ).cast<TimeType>();
    		}

    		Pacsltk(const Pacsltk&) = delete;

    		Pacsltk& operator=(const Pacsltk&) = delete;

  	private:

    #ifndef PYTHONDIR
    		static_assert(false, "From src/Performance/PerfromancePredictors.hpp.in: @PYTHONDIR@ path not defined: Please check your definition");
    #endif
    		Pacsltk(): pacsltk_predictor((PythonDirConfigure(PYTHONDIR), py::module_::import("PACSLTK").attr("predictor"))) {};

    		void
    		PythonDirConfigure(const std::string& path)
    		{
    			pybind11::module sys = pybind11::module::import("sys");
    			pybind11::cast<pybind11::list>(sys.attr("path")).append(path); // for ML-Library
    		}

  	private:

  		  const py::object pacsltk_predictor;
};

} //namespace Space4AI

#endif /* PERFORMANCEPREDICTORS_HPP_ */
